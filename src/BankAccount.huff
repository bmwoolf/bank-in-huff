/* Interface */
#define function deposit(uint256) payable returns ()
#define function wire(address,uint256) payable returns (bool)
#define function withdraw(uint256) payable returns (uint256)
#define function getBalance() view returns (uint256)

/* Storage Layout */
#define constant MASK_ADDR = 0xffffffffffffffffffffffffffffffffffffffff

/* Storage Slots */
#define constant USD_ADDRESS = FREE_STORAGE_POINTER() // how do i optimize this?
#define constant OWNER_ADDRESS = FREE_STORAGE_POINTER()
#define constant ADDRESSES = FREE_STORAGE_POINTER()

/* Events */
#define event Deposit(address,uint256)
#define event Wire(address,address,uint256)
#define event Withdraw(address,uint256)

/* Methods */
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Set msg.sender as the owner of the contract.
    caller [OWNER_ADDRESS] sstore
}

#define macro DEPOSIT(amount) = takes(1) returns(0) {
    0x04 calldataload   // [value]
}

#define macro WITHDRAW(amount) = takes(1) returns(0) {
    // require that it is the owner of the account
    ONLY_OWNER()
    // call opcode transferring from contract to individual
}

#define macro WIRE(to, amount) = takes(2) returns(0) {
    // require that it is the owner of the account
    ONLY_OWNER()
    // call opcode transferring from individual to individual
        // what actually makes this different than just sending the money from wallet to wallet?
            // ensuring that it is the correct one?
}

#define macro GET_BALANCE() = takes(0) returns(0) {
    NO_VALUE_CHECK(returndatasize)
    // how do i return the ether value?
}


/* Utils */
#define macro NO_VALUE_CHECK(zero) = takes(0) returns (0) {
    callvalue iszero valueCheck jumpi
        <zero> <zero> revert // instead of using 0x00, use <zero>
    valueCheck:
}


/* Modifiers */
#define macro ONLY_OWNER() = takes(0) returns(0) {
    [OWNER_ADDRESS] sload caller eq is_owner jumpi
        <zero> <zero> revert
    is_owner:
}

/* Main jump table for the contract */
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    <zero> calldataload 0xE0 shr
    dup1 0x55241077 eq deposit jumpi
    dup1 0xc32cefa1 eq wire jumpi
    dup1 0x2e1a7d4d eq withdraw jumpi
    dup1 0x12065fe0 eq getBalance jumpi

    deposit:
        DEPOSIT()
    wire:
        WIRE()
    withdraw:
        WITHDRAW()
    getBalance:
        GET_BALANCE()
}